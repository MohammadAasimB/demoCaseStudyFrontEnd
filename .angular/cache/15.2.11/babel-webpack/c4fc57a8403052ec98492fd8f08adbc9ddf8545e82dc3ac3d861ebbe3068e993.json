{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../Service/service.service\";\nexport class EditDataComponent {\n  constructor(formBuilder, service) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.get = false;\n    this.submittedData = null;\n    this.backEndData = null;\n    this.id = \"\";\n    const dynamicData = {\n      name: this.backEndData.name,\n      age: this.backEndData.age,\n      salary: this.backEndData.salary,\n      department: this.backEndData.department\n    };\n    // Initialize the form using FormBuilder (use Validators if necessary)\n    this.myForm = this.formBuilder.group({\n      name: [dynamicData.name, Validators.required],\n      age: [dynamicData.age, Validators.required],\n      salary: [dynamicData.salary, Validators.required],\n      department: [dynamicData.department, Validators.required] // A form control for 'department' with validation\n    });\n  }\n\n  ngOnInit() {\n    this.service.getById(this.id).subscribe(data => {\n      // console.log(data);\n      this.backEndData = data;\n      console.log(this.backEndData);\n      return this.backEndData;\n    });\n  }\n  // Submit method\n  onSubmit() {\n    if (this.myForm.valid) {\n      // <-- Check if the form is valid before submission\n      console.log(this.myForm.value); // This logs the form's value\n      this.submittedData = this.myForm.value;\n      this.service.addData(this.myForm.value).subscribe(data => {\n        console.log(data);\n        return this.myForm.value;\n      });\n    } else {\n      console.log('Form is invalid');\n      console.log(this.myForm);\n    }\n  }\n  static {\n    this.ɵfac = function EditDataComponent_Factory(t) {\n      return new (t || EditDataComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ServiceService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: EditDataComponent,\n      selectors: [[\"app-edit-data\"]],\n      decls: 2,\n      vars: 0,\n      template: function EditDataComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\");\n          i0.ɵɵtext(1, \"hello\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"body[_ngcontent-%COMP%] {\\r\\n    font-family: 'Roboto', sans-serif;\\r\\n    background-color: #f4f7f6;\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  .card1[_ngcontent-%COMP%] {\\r\\n    background-color: #fff;\\r\\n    border-radius: 10px;\\r\\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\\r\\n    margin: 20px;\\r\\n    padding: 20px;\\r\\n    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\\r\\n    max-width: 400px;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  .card1[_ngcontent-%COMP%]:hover {\\r\\n    transform: translateY(-10px);\\r\\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  .card1[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\r\\n    font-weight: bold;\\r\\n    color: #333;\\r\\n    margin: 0;\\r\\n  }\\r\\n  \\r\\n  .card1[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\r\\n    display: block;\\r\\n    font-size: 1.2em;\\r\\n    color: #555;\\r\\n    margin-bottom: 10px;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  .name[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .age[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .salery[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .department[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\r\\n    font-weight: 500;\\r\\n    color: #333;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  .id[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\r\\n    font-weight: bold;\\r\\n    color: #0066cc;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  .card1[_ngcontent-%COMP%]   .id[_ngcontent-%COMP%], .card1[_ngcontent-%COMP%]   .name[_ngcontent-%COMP%], .card1[_ngcontent-%COMP%]   .age[_ngcontent-%COMP%], .card1[_ngcontent-%COMP%]   .salery[_ngcontent-%COMP%], .card1[_ngcontent-%COMP%]   .department[_ngcontent-%COMP%] {\\r\\n    margin-bottom: 15px;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  @media screen and (max-width: 768px) {\\r\\n    .card1[_ngcontent-%COMP%] {\\r\\n      max-width: 100%;\\r\\n      padding: 15px;\\r\\n    }\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZWRpdC1kYXRhL2VkaXQtZGF0YS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQjtJQUNJLGlDQUFpQztJQUNqQyx5QkFBeUI7SUFDekIsU0FBUztJQUNULFVBQVU7RUFDWjs7RUFFQSwrQkFBK0I7RUFDL0I7SUFDRSxzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHdDQUF3QztJQUN4QyxZQUFZO0lBQ1osYUFBYTtJQUNiLG1FQUFtRTtJQUNuRSxnQkFBZ0I7RUFDbEI7O0VBRUEsMEJBQTBCO0VBQzFCO0lBQ0UsNEJBQTRCO0lBQzVCLHlDQUF5QztFQUMzQzs7RUFFQSxnQ0FBZ0M7RUFDaEM7SUFDRSxpQkFBaUI7SUFDakIsV0FBVztJQUNYLFNBQVM7RUFDWDs7RUFFQTtJQUNFLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLG1CQUFtQjtFQUNyQjs7RUFFQSwyQkFBMkI7RUFDM0I7SUFDRSxnQkFBZ0I7SUFDaEIsV0FBVztFQUNiOztFQUVBLHFCQUFxQjtFQUNyQjtJQUNFLGlCQUFpQjtJQUNqQixjQUFjO0VBQ2hCOztFQUVBLDRCQUE0QjtFQUM1QjtJQUNFLG1CQUFtQjtFQUNyQjs7RUFFQSxzQkFBc0I7RUFDdEI7SUFDRTtNQUNFLGVBQWU7TUFDZixhQUFhO0lBQ2Y7RUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEdlbmVyYWwgU3R5bGluZyAqL1xyXG5ib2R5IHtcclxuICAgIGZvbnQtZmFtaWx5OiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNGY3ZjY7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gIH1cclxuICBcclxuICAvKiBTdHlsaW5nIGZvciBDYXJkIENvbnRhaW5lciAqL1xyXG4gIC5jYXJkMSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGJveC1zaGFkb3c6IDAgNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgICBtYXJnaW46IDIwcHg7XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4ycyBlYXNlLWluLW91dDtcclxuICAgIG1heC13aWR0aDogNDAwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC8qIEhvdmVyIGVmZmVjdCBmb3IgY2FyZCAqL1xyXG4gIC5jYXJkMTpob3ZlciB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwcHgpO1xyXG4gICAgYm94LXNoYWRvdzogMCA4cHggMTZweCByZ2JhKDAsIDAsIDAsIDAuMik7XHJcbiAgfVxyXG4gIFxyXG4gIC8qIFN0eWxpbmcgZm9yIGVhY2ggZGF0YSBmaWVsZCAqL1xyXG4gIC5jYXJkMSBwIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6ICMzMzM7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgfVxyXG4gIFxyXG4gIC5jYXJkMSBzcGFuIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgZm9udC1zaXplOiAxLjJlbTtcclxuICAgIGNvbG9yOiAjNTU1O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICB9XHJcbiAgXHJcbiAgLyogU3BlY2lmaWMgZmllbGQgc3R5bGluZyAqL1xyXG4gIC5uYW1lIHNwYW4sIC5hZ2Ugc3BhbiwgLnNhbGVyeSBzcGFuLCAuZGVwYXJ0bWVudCBzcGFuIHtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgICBjb2xvcjogIzMzMztcclxuICB9XHJcbiAgXHJcbiAgLyogSUQgZmllbGQgc3R5bGluZyAqL1xyXG4gIC5pZCBzcGFuIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgY29sb3I6ICMwMDY2Y2M7XHJcbiAgfVxyXG4gIFxyXG4gIC8qIExheW91dCBmb3IgQ2FyZCBDb250ZW50ICovXHJcbiAgLmNhcmQxIC5pZCwgLmNhcmQxIC5uYW1lLCAuY2FyZDEgLmFnZSwgLmNhcmQxIC5zYWxlcnksIC5jYXJkMSAuZGVwYXJ0bWVudCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gIH1cclxuICBcclxuICAvKiBSZXNwb25zaXZlIERlc2lnbiAqL1xyXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAuY2FyZDEge1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICAgIHBhZGRpbmc6IDE1cHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAOnE,OAAM,MAAOC,iBAAiB;EAS5BC,YAAoBC,WAAwB,EAASC,OAAsB;IAAvD,gBAAW,GAAXD,WAAW;IAAsB,YAAO,GAAPC,OAAO;IAP5D,QAAG,GAAU,KAAK;IAElB,kBAAa,GAAO,IAAI;IACxB,gBAAW,GAAK,IAAI;IACpB,OAAE,GAAQ,EAAE;IAIV,MAAMC,WAAW,GAAG;MAClBC,IAAI,EAAE,IAAI,CAACC,WAAW,CAACD,IAAI;MAC3BE,GAAG,EAAE,IAAI,CAACD,WAAW,CAACC,GAAG;MACzBC,MAAM,EAAE,IAAI,CAACF,WAAW,CAACE,MAAM;MAC/BC,UAAU,EAAE,IAAI,CAACH,WAAW,CAACG;KAC9B;IACD;IACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACR,WAAW,CAACS,KAAK,CAAC;MACnCN,IAAI,EAAE,CAACD,WAAW,CAACC,IAAI,EAAEN,UAAU,CAACa,QAAQ,CAAC;MAC7CL,GAAG,EAAE,CAACH,WAAW,CAACG,GAAG,EAAER,UAAU,CAACa,QAAQ,CAAC;MAC3CJ,MAAM,EAAE,CAACJ,WAAW,CAACI,MAAM,EAAET,UAAU,CAACa,QAAQ,CAAC;MACjDH,UAAU,EAAE,CAACL,WAAW,CAACK,UAAU,EAAEV,UAAU,CAACa,QAAQ,CAAC,CAAI;KAC9D,CAAC;EACJ;;EAEAC,QAAQ;IACN,IAAI,CAACV,OAAO,CAACW,OAAO,CAAC,IAAI,CAACC,EAAE,CAAC,CAACC,SAAS,CAAEC,IAAS,IAAI;MACpD;MACA,IAAI,CAACX,WAAW,GAACW,IAAI;MACrBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,WAAW,CAAC;MAC7B,OAAO,IAAI,CAACA,WAAW;IACzB,CAAC,CAAC;EAEJ;EAEA;EACAc,QAAQ;IACN,IAAI,IAAI,CAACV,MAAM,CAACW,KAAK,EAAE;MAAG;MACxBH,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,MAAM,CAACY,KAAK,CAAC,CAAC,CAAE;MACjC,IAAI,CAACC,aAAa,GAAG,IAAI,CAACb,MAAM,CAACY,KAAK;MAEtC,IAAI,CAACnB,OAAO,CAACqB,OAAO,CAAC,IAAI,CAACd,MAAM,CAACY,KAAK,CAAC,CAACN,SAAS,CAACC,IAAI,IAAE;QACtDC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;QACjB,OAAO,IAAI,CAACP,MAAM,CAACY,KAAK;MAC1B,CAAC,CAAC;KAEH,MAAM;MACLJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,MAAM,CAAC;;EAE5B;;;uBAlDWV,iBAAiB;IAAA;EAAA;;;YAAjBA,iBAAiB;MAAAyB;MAAAC;MAAAC;MAAAC;QAAA;UCiC9BC,0BAAI;UAAAA,qBAAK;UAAAA,iBAAK","names":["Validators","EditDataComponent","constructor","formBuilder","service","dynamicData","name","backEndData","age","salary","department","myForm","group","required","ngOnInit","getById","id","subscribe","data","console","log","onSubmit","valid","value","submittedData","addData","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\MB20\\check\\src\\app\\edit-data\\edit-data.component.ts","C:\\Users\\MB20\\check\\src\\app\\edit-data\\edit-data.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ServiceService } from '../Service/service.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-edit-data',\n  templateUrl: './edit-data.component.html',\n  styleUrls: ['./edit-data.component.css']\n})\nexport class EditDataComponent implements OnInit{\n\n  get: boolean=false;\n  myForm: FormGroup;  // <-- Declare the form group\n  submittedData:any = null;\n  backEndData:any=null;\n  id:String=\"\";\n\n\n  constructor(private formBuilder: FormBuilder,private service:ServiceService) { \n    const dynamicData = {\n      name: this.backEndData.name,\n      age: this.backEndData.age,\n      salary: this.backEndData.salary,\n      department: this.backEndData.department\n    };\n    // Initialize the form using FormBuilder (use Validators if necessary)\n    this.myForm = this.formBuilder.group({\n      name: [dynamicData.name, Validators.required],         // A form control for 'name' with validation\n      age: [dynamicData.age, Validators.required],          // A form control for 'age' with validation\n      salary: [dynamicData.salary, Validators.required],       // A form control for 'salary' with validation\n      department: [dynamicData.department, Validators.required]    // A form control for 'department' with validation\n    });\n  }\n\n  ngOnInit(): void {\n    this.service.getById(this.id).subscribe((data: any) => {\n      // console.log(data);\n      this.backEndData=data;\n      console.log(this.backEndData);\n      return this.backEndData\n    })\n\n  }\n\n  // Submit method\n  onSubmit():void {\n    if (this.myForm.valid) {  // <-- Check if the form is valid before submission\n      console.log(this.myForm.value);  // This logs the form's value\n      this.submittedData = this.myForm.value;\n      \n      this.service.addData(this.myForm.value).subscribe(data=>{\n        console.log(data);\n        return this.myForm.value\n      })\n\n    } else {\n      console.log('Form is invalid');\n      console.log(this.myForm);\n    }\n  }\n\n\n}\n","<!-- <div class=\"container\" *ngIf=\"!submittedData\">\n    <h1>Edit Data</h1>\n    <form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n            <label for=\"name\">Name</label>\n            <input type=\"text\" formControlName=\"name\" class=\"form-control\">\n        </div>\n        <pre></pre>\n        <div class=\"form-group\">\n            <label for=\"age\">Age</label>\n            <input type=\"text\" formControlName=\"age\" class=\"form-control\">\n        </div>\n        <pre></pre>\n        <div class=\"form-group\">\n            <label for=\"salary\">Salary</label>\n            <input type=\"text\" formControlName=\"salary\" class=\"form-control\">\n        </div>\n        <pre></pre>\n        <div class=\"form-group\">\n            <label for=\"department\">Department</label>\n            <input type=\"text\" formControlName=\"department\" class=\"form-control\">\n        </div>\n        <pre></pre>\n        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"myForm.invalid\">Submit</button>\n    </form>\n\n    <div *ngIf=\"myForm.invalid\">\n        Form is invalid\n    </div>\n    \n</div>\n<div *ngIf=\"submittedData\">\n    <div >\n        <h1>Your form is Submitted</h1>\n        <h2>Submitted Data</h2>\n        <p><strong>Name:</strong> {{ submittedData.name }}</p>\n        <p><strong>Age:</strong> {{ submittedData.age }}</p>\n        <p><strong>Salary:</strong> {{ submittedData.salary }}</p>\n        <p><strong>Department:</strong> {{ submittedData.department }}</p>\n      </div>\n</div> -->\n\n<h1>hello</h1>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}