{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../Service/service.service\";\nimport * as i3 from \"@angular/common\";\nfunction AddDataComponent_div_0_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Form is invalid \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddDataComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"h1\");\n    i0.ɵɵtext(2, \"Add Data\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 3);\n    i0.ɵɵlistener(\"ngSubmit\", function AddDataComponent_div_0_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onSubmit());\n    });\n    i0.ɵɵelementStart(4, \"div\", 4)(5, \"label\", 5);\n    i0.ɵɵtext(6, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"pre\");\n    i0.ɵɵelementStart(9, \"div\", 4)(10, \"label\", 7);\n    i0.ɵɵtext(11, \"Age\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"input\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"pre\");\n    i0.ɵɵelementStart(14, \"div\", 4)(15, \"label\", 9);\n    i0.ɵɵtext(16, \"Salary\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(17, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(18, \"pre\");\n    i0.ɵɵelementStart(19, \"div\", 4)(20, \"label\", 11);\n    i0.ɵɵtext(21, \"Department\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(23, \"pre\");\n    i0.ɵɵelementStart(24, \"button\", 13);\n    i0.ɵɵtext(25, \"Submit\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(26, AddDataComponent_div_0_div_26_Template, 2, 0, \"div\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.myForm);\n    i0.ɵɵadvance(21);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.myForm.invalid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.myForm.invalid && ctx_r0.myForm.dirty && ctx_r0.myForm.touched);\n  }\n}\nfunction AddDataComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\")(2, \"h1\");\n    i0.ɵɵtext(3, \"Your form is Submitted\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"h2\");\n    i0.ɵɵtext(5, \"Submitted Data\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\")(7, \"strong\");\n    i0.ɵɵtext(8, \"Name:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\")(11, \"strong\");\n    i0.ɵɵtext(12, \"Age:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"p\")(15, \"strong\");\n    i0.ɵɵtext(16, \"Salary:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"p\")(19, \"strong\");\n    i0.ɵɵtext(20, \"Department:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.submittedData.name, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.submittedData.age, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.submittedData.salary, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.submittedData.department, \"\");\n  }\n}\nexport class AddDataComponent {\n  constructor(formBuilder, service) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.get = false;\n    this.submittedData = null;\n    // Initialize the form using FormBuilder (use Validators if necessary)\n    this.myForm = this.formBuilder.group({\n      name: ['', Validators.required, Validators.minLength(3), Validators.maxLength(50)],\n      age: ['', Validators.required],\n      salary: ['', Validators.required],\n      department: ['', Validators.required] // A form control for 'department' with validation\n    });\n  }\n  // Submit method\n  onSubmit() {\n    if (this.myForm.valid) {\n      // <-- Check if the form is valid before submission\n      console.log(this.myForm.value); // This logs the form's value\n      this.submittedData = this.myForm.value;\n      this.service.addData(this.myForm.value).subscribe(data => {\n        console.log(data);\n        return this.myForm.value;\n      });\n    } else {\n      console.log('Form is invalid');\n      console.log(this.myForm);\n    }\n  }\n  static {\n    this.ɵfac = function AddDataComponent_Factory(t) {\n      return new (t || AddDataComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ServiceService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddDataComponent,\n      selectors: [[\"app-add-data\"]],\n      decls: 2,\n      vars: 2,\n      consts: [[\"class\", \"container\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [\"for\", \"age\"], [\"type\", \"text\", \"formControlName\", \"age\", 1, \"form-control\"], [\"for\", \"salary\"], [\"type\", \"text\", \"formControlName\", \"salary\", 1, \"form-control\"], [\"for\", \"department\"], [\"type\", \"text\", \"formControlName\", \"department\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"]],\n      template: function AddDataComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, AddDataComponent_div_0_Template, 27, 3, \"div\", 0);\n          i0.ɵɵtemplate(1, AddDataComponent_div_1_Template, 22, 4, \"div\", 1);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", !ctx.submittedData);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.submittedData);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"div[_ngcontent-%COMP%]{\\r\\n    text-align: center;\\r\\n}\\r\\nlabel[_ngcontent-%COMP%]{\\r\\n    text-align: left;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWRkLWRhdGEvYWRkLWRhdGEuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksZ0JBQWdCO0FBQ3BCIiwic291cmNlc0NvbnRlbnQiOlsiZGl2e1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbmxhYmVse1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Validators","i0","AddDataComponent","constructor","formBuilder","service","myForm","group","name","required","minLength","maxLength","age","salary","department","onSubmit","valid","console","log","value","submittedData","addData","subscribe","data","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\MB20\\check\\src\\app\\add-data\\add-data.component.ts","C:\\Users\\MB20\\check\\src\\app\\add-data\\add-data.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ServiceService } from '../Service/service.service';\n\n@Component({\n  selector: 'app-add-data',\n  templateUrl: './add-data.component.html',\n  styleUrls: ['./add-data.component.css']\n})\nexport class AddDataComponent {\n\n  get: boolean=false;\n  myForm: FormGroup;  // <-- Declare the form group\n  submittedData:any = null;\n\n  constructor(private formBuilder: FormBuilder,private service:ServiceService) { \n    // Initialize the form using FormBuilder (use Validators if necessary)\n    this.myForm = this.formBuilder.group({\n      name: ['', Validators.required, Validators.minLength(3), Validators.maxLength(50)],         // A form control for 'name' with validation\n      age: ['', Validators.required],          // A form control for 'age' with validation\n      salary: ['', Validators.required],       // A form control for 'salary' with validation\n      department: ['', Validators.required]    // A form control for 'department' with validation\n    });\n  }\n\n  // Submit method\n  onSubmit():void {\n    if (this.myForm.valid) {  // <-- Check if the form is valid before submission\n      console.log(this.myForm.value);  // This logs the form's value\n      this.submittedData = this.myForm.value;\n      \n      this.service.addData(this.myForm.value).subscribe(data=>{\n        console.log(data);\n        return this.myForm.value\n      })\n\n    } else {\n      console.log('Form is invalid');\n      console.log(this.myForm);\n    }\n  }\n  \n}\n","<div class=\"container\" *ngIf=\"!submittedData\">\n    <h1>Add Data</h1>\n    <form [formGroup]=\"myForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n            <label for=\"name\">Name</label>\n            <input type=\"text\" formControlName=\"name\" class=\"form-control\">\n        </div>\n        <pre></pre>\n        <div class=\"form-group\">\n            <label for=\"age\">Age</label>\n            <input type=\"text\" formControlName=\"age\" class=\"form-control\">\n        </div>\n        <pre></pre>\n        <div class=\"form-group\">\n            <label for=\"salary\">Salary</label>\n            <input type=\"text\" formControlName=\"salary\" class=\"form-control\">\n        </div>\n        <pre></pre>\n        <div class=\"form-group\">\n            <label for=\"department\">Department</label>\n            <input type=\"text\" formControlName=\"department\" class=\"form-control\">\n        </div>\n        <pre></pre>\n        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"myForm.invalid\">Submit</button>\n    </form>\n\n    <div *ngIf=\"myForm.invalid && myForm.dirty && myForm.touched\">\n        Form is invalid\n    </div>\n    \n</div>\n<div *ngIf=\"submittedData\">\n    <div >\n        <h1>Your form is Submitted</h1>\n        <h2>Submitted Data</h2>\n        <p><strong>Name:</strong> {{ submittedData.name }}</p>\n        <p><strong>Age:</strong> {{ submittedData.age }}</p>\n        <p><strong>Salary:</strong> {{ submittedData.salary }}</p>\n        <p><strong>Department:</strong> {{ submittedData.department }}</p>\n      </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}